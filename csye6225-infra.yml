AWSTemplateFormatVersion: "2010-09-09"

Description: CSYE6225 Infrastructure - Assignment 3

Parameters:
  vpcCIDR:
    Default: "10.0.0.0/16"
    Type: String
    Description: CIDR block for VPC
  aSubnetCIDR:
    Default: "10.0.1.0/24"
    Type: String
    Description: CIDR block for public subnet a
  bSubnetCIDR:
    Default: "10.0.2.0/24"
    Type: String
    Description: CIDR block for public subnet b
  cSubnetCIDR:
    Default: "10.0.3.0/24"
    Type: String
    Description: CIDR block for public subnet c
  imageId:
    Default: ""
    Type: String
    Description: AMI ID
  bucketRegion:
    Default: ""
    Type: String
    Description: Region for S3 bucket
  # awsAccessKey:
  #   Default: ""
  #   Type: String
  #   Description: Prod user Access Key
  # awsSecretKey:
  #   Default: ""
  #   Type: String
  #   Description: Prod user Secret Key

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: myVPC

  subnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref aSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet A

  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref bSubnetCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet B

  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref cSubnetCIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet C

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG-myVPC

  igAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref vpc

  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  subnetApublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetA

  subnetBpublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetB

  subnetCpublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetC

  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Security group for webservice EC2 Instance
      GroupName: application
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3000
          ToPort: 3000
        
  ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref ec2profile
      ImageId: !Ref imageId
      InstanceType: t2.micro
      DisableApiTermination: false
      NetworkInterfaces:
        - SubnetId: !Ref subnetA
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [!Ref ec2SecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo touch /tmp/app_patch/.env
          sudo echo 'RDS_USERNAME = csye6225' >> /tmp/app_patch/.env
          sudo echo 'RDS_PASSWORD = multi-bun#6969' >> /tmp/app_patch/.env
          sudo echo 'RDS_HOSTNAME = ${rdsInstance.Endpoint.Address}' >> /tmp/app_patch/.env
          sudo echo 'RDS_BUCKET_NAME = kdab.prod.kartheekdabbiru.me' >> /tmp/app_patch/.env
          sudo echo 'RDS_DB_NAME = user_db' >> /tmp/app_patch/.env
          sudo echo 'AWS_BUCKET_REGION = ${bucketRegion}' >> /tmp/app_patch/.env

  #-------------------------------A5------------------------------
  #Private Subnets for RDS instance
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet A
  
  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet B
  
  privateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet C
  
  #Private Route Table
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref vpc

  #Private subnet associations
  privateSubnetAprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetA

  privateSubnetBprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetB

  privateSubnetCprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetC

  # Database Security Group
  dbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Database security group
      GroupName: database

  dbSecurityGroupIngress:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref dbSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ec2SecurityGroup

  #Encrypted private s3 bucket
  myS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: kdab.prod.kartheekdabbiru.me
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            MaxAge: '1800'
      LifecycleConfiguration: 
        Rules:
          - Id: STANDARD_IA_RULE
            Prefix: logs
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete
  
  #IAM role for EC2-S3 access
  ec2csye6225:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  #S3 bucket policy
  WebAppS3:
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: WebAppS3
      PolicyDocument:
        Version : "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - 'arn:aws:s3:::kdab.prod.kartheekdabbiru.me'
              - 'arn:aws:s3:::kdab.prod.kartheekdabbiru.me/*'
      Roles: 
        - Ref: "ec2csye6225"

  #EC2 instance profile
  ec2profile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "ec2csye6225"

  #RDS subnet group
  rdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private subnet group for RDS instance
      DBSubnetGroupName: rdsSubnetGroup
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
        - !Ref privateSubnetC

  #RDS Parameter Group
  rdsParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: Parameter group for PSQL based RDS instance
      Family: postgres13

  #RDS instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      StorageType: gp2
      Engine: postgres
      EngineVersion: 13.4
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: multi-bun#6969
      DBSubnetGroupName: !Ref rdsSubnetGroup
      PubliclyAccessible: false
      DBName: csye6225
      DBParameterGroupName: !Ref rdsParameterGroup
      VPCSecurityGroups: 
        - !Ref dbSecurityGroup

  #-------------------------------A6------------------------------

  # #Loadbalancer Security Group
  # lbSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref vpc
  #     GroupDescription: Load Balancer Security group to access web application
  #     GroupName: load balancer
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/0
  #         FromPort: 80
  #         ToPort: 80
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/0
  #         FromPort: 443
  #         ToPort: 443







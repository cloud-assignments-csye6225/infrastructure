AWSTemplateFormatVersion: "2010-09-09"

Description: CSYE6225 Infrastructure - Spring 2022

Parameters:
  vpcCIDR:
    Default: "10.0.0.0/16"
    Type: String
    Description: CIDR block for VPC
  aSubnetCIDR:
    Default: "10.0.1.0/24"
    Type: String
    Description: CIDR block for public subnet a
  bSubnetCIDR:
    Default: "10.0.2.0/24"
    Type: String
    Description: CIDR block for public subnet b
  cSubnetCIDR:
    Default: "10.0.3.0/24"
    Type: String
    Description: CIDR block for public subnet c
  imageId:
    Default: ""
    Type: String
    Description: AMI ID
  bucketRegion:
    Default: ""
    Type: String
    Description: Region for S3 bucket
  DNSName:
    Default: ""
    Type: String
    Description: prod account DNS

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: myVPC

  subnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref aSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet A

  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref bSubnetCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet B

  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref cSubnetCIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: subnet C

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG-myVPC

  igAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref vpc

  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  subnetApublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetA

  subnetBpublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetB

  subnetCpublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref subnetC

  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Security group for webservice EC2 Instance
      GroupName: application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref lbSecurityGroup
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref lbSecurityGroup
        
  # ec2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     IamInstanceProfile: !Ref ec2profile
  #     ImageId: !Ref imageId
  #     InstanceType: t2.micro
  #     DisableApiTermination: false
  #     NetworkInterfaces:
  #       - SubnetId: !Ref subnetA
  #         AssociatePublicIpAddress: true
  #         DeviceIndex: 0
  #         GroupSet: [!Ref ec2SecurityGroup]
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp2
  #           VolumeSize: '20'
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         sudo touch /tmp/app_patch/.env
  #         sudo echo 'RDS_USERNAME = csye6225' >> /tmp/app_patch/.env
  #         sudo echo 'RDS_PASSWORD = multi-bun#6969' >> /tmp/app_patch/.env
  #         sudo echo 'RDS_HOSTNAME = ${rdsInstance.Endpoint.Address}' >> /tmp/app_patch/.env
  #         sudo echo 'RDS_BUCKET_NAME = kdab.prod.kartheekdabbiru.me' >> /tmp/app_patch/.env
  #         sudo echo 'RDS_DB_NAME = user_db' >> /tmp/app_patch/.env
  #         sudo echo 'AWS_BUCKET_REGION = ${bucketRegion}' >> /tmp/app_patch/.env

  #-------------------------------A5------------------------------
  #Private Subnets for RDS instance
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet A
  
  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet B
  
  privateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: private subnet C
  
  #Private Route Table
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref vpc

  #Private subnet associations
  privateSubnetAprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetA

  privateSubnetBprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetB

  privateSubnetCprivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetC

  #Database Security Group
  dbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Database security group
      GroupName: database

  dbSecurityGroupIngress:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref dbSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ec2SecurityGroup

  #Encrypted private s3 bucket
  myS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: kdab.prod.kartheekdabbiru.me
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            MaxAge: '1800'
      LifecycleConfiguration: 
        Rules:
          - Id: STANDARD_IA_RULE
            Prefix: logs
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete
  
  #IAM role for EC2-S3 access
  ec2csye6225:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  #S3 bucket policy
  WebAppS3:
    Type: 'AWS::IAM::Policy'
    Properties: 
      PolicyName: WebAppS3
      PolicyDocument:
        Version : "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - 'arn:aws:s3:::kdab.prod.kartheekdabbiru.me'
              - 'arn:aws:s3:::kdab.prod.kartheekdabbiru.me/*'
      Roles: 
        - Ref: "ec2csye6225"

  #EC2 instance profile
  ec2profile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "ec2csye6225"

  #RDS subnet group
  rdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private subnet group for RDS instance
      DBSubnetGroupName: rdsSubnetGroup
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
        - !Ref privateSubnetC

  #RDS Parameter Group
  rdsParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: Parameter group for PSQL based RDS instance
      Family: postgres13

  #RDS instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      StorageType: gp2
      Engine: postgres
      EngineVersion: 13.4
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: multi-bun#6969
      DBSubnetGroupName: !Ref rdsSubnetGroup
      PubliclyAccessible: false
      DBName: csye6225
      DBParameterGroupName: !Ref rdsParameterGroup
      VPCSecurityGroups: 
        - !Ref dbSecurityGroup

  #-------------------------------A6------------------------------

  #Load balancer Security Group
  lbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Load Balancer Security group to access web application
      GroupName: load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443

  #Launch Configuration
  asgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref imageId
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo touch /tmp/app_patch/.env
          sudo echo 'RDS_USERNAME = csye6225' >> /tmp/app_patch/.env
          sudo echo 'RDS_PASSWORD = multi-bun#6969' >> /tmp/app_patch/.env
          sudo echo 'RDS_HOSTNAME = ${rdsInstance.Endpoint.Address}' >> /tmp/app_patch/.env
          sudo echo 'RDS_BUCKET_NAME = kdab.prod.kartheekdabbiru.me' >> /tmp/app_patch/.env
          sudo echo 'RDS_DB_NAME = user_db' >> /tmp/app_patch/.env
          sudo echo 'AWS_BUCKET_REGION = ${bucketRegion}' >> /tmp/app_patch/.env
      IamInstanceProfile: !Ref ec2profile
      LaunchConfigurationName: asg_launch_config
      SecurityGroups: 
        - !Ref ec2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
            DeleteOnTermination: true

  #Auto Scaling Group
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      LaunchConfigurationName: !Ref asgLaunchConfig
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '1'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref subnetA
        - !Ref subnetB
        - !Ref subnetC

  #Load Balancer Target Group
  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3000
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpc

  #Load Balancer
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref lbSecurityGroup
      Subnets:
        - !Ref subnetA
        - !Ref subnetB
        - !Ref subnetC
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  #Load Balancer Listener
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP

  #Scale up policy
  scaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: 60
      ScalingAdjustment: 1

  #Scale down policy
  scaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: 60
      ScalingAdjustment: -1

  #CPU utilization high alarm
  cpuUtilHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref scaleUpPolicy
      AlarmDescription: Alarm when the average CPU usage is higher than 2% 
      AlarmName: CPU Alarm - High
      ComparisonOperator: GreaterThanThreshold
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '2'

  #CPU utilization low alarm
  cpuUtilLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref scaleDownPolicy
      AlarmDescription: Alarm when the average CPU usage is lower than 1% 
      AlarmName: CPU Alarm - Low
      ComparisonOperator: LessThanThreshold
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '1'

  #DNS record set group
  lbAliasDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref DNSName
      Comment: Alias record directing to LoadBalancer.
      RecordSets:
      - Name: !Ref DNSName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'loadBalancer.DNSName'